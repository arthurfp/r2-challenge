// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/services/command/register_user.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	domain "r2-challenge/internal/user/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterService is a mock of RegisterService interface.
type MockRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterServiceMockRecorder
}

// MockRegisterServiceMockRecorder is the mock recorder for MockRegisterService.
type MockRegisterServiceMockRecorder struct {
	mock *MockRegisterService
}

// NewMockRegisterService creates a new mock instance.
func NewMockRegisterService(ctrl *gomock.Controller) *MockRegisterService {
	mock := &MockRegisterService{ctrl: ctrl}
	mock.recorder = &MockRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterService) EXPECT() *MockRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterService) Register(ctx context.Context, user domain.User, plainPassword string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user, plainPassword)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterServiceMockRecorder) Register(ctx, user, plainPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterService)(nil).Register), ctx, user, plainPassword)
}
