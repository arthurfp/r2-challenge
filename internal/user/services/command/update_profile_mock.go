// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/services/command/update_profile.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	domain "r2-challenge/internal/user/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateProfileService is a mock of UpdateProfileService interface.
type MockUpdateProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateProfileServiceMockRecorder
}

// MockUpdateProfileServiceMockRecorder is the mock recorder for MockUpdateProfileService.
type MockUpdateProfileServiceMockRecorder struct {
	mock *MockUpdateProfileService
}

// NewMockUpdateProfileService creates a new mock instance.
func NewMockUpdateProfileService(ctrl *gomock.Controller) *MockUpdateProfileService {
	mock := &MockUpdateProfileService{ctrl: ctrl}
	mock.recorder = &MockUpdateProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateProfileService) EXPECT() *MockUpdateProfileServiceMockRecorder {
	return m.recorder
}

// UpdateProfile mocks base method.
func (m *MockUpdateProfileService) UpdateProfile(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUpdateProfileServiceMockRecorder) UpdateProfile(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUpdateProfileService)(nil).UpdateProfile), ctx, user)
}
