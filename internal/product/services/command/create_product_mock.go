// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/services/command/create_product.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	domain "r2-challenge/internal/product/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateService is a mock of CreateService interface.
type MockCreateService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateServiceMockRecorder
}

// MockCreateServiceMockRecorder is the mock recorder for MockCreateService.
type MockCreateServiceMockRecorder struct {
	mock *MockCreateService
}

// NewMockCreateService creates a new mock instance.
func NewMockCreateService(ctrl *gomock.Controller) *MockCreateService {
	mock := &MockCreateService{ctrl: ctrl}
	mock.recorder = &MockCreateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateService) EXPECT() *MockCreateServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateService) Create(ctx context.Context, product domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreateServiceMockRecorder) Create(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateService)(nil).Create), ctx, product)
}
