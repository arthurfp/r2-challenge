// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/services/query/list.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	db "r2-challenge/internal/product/adapters/db"
	domain "r2-challenge/internal/product/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListService is a mock of ListService interface.
type MockListService struct {
	ctrl     *gomock.Controller
	recorder *MockListServiceMockRecorder
}

// MockListServiceMockRecorder is the mock recorder for MockListService.
type MockListServiceMockRecorder struct {
	mock *MockListService
}

// NewMockListService creates a new mock instance.
func NewMockListService(ctrl *gomock.Controller) *MockListService {
	mock := &MockListService{ctrl: ctrl}
	mock.recorder = &MockListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListService) EXPECT() *MockListServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockListService) List(ctx context.Context, f db.ProductFilter) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, f)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockListServiceMockRecorder) List(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockListService)(nil).List), ctx, f)
}
