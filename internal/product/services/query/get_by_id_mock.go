// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/services/query/get_by_id.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	domain "r2-challenge/internal/product/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetByIDService is a mock of GetByIDService interface.
type MockGetByIDService struct {
	ctrl     *gomock.Controller
	recorder *MockGetByIDServiceMockRecorder
}

// MockGetByIDServiceMockRecorder is the mock recorder for MockGetByIDService.
type MockGetByIDServiceMockRecorder struct {
	mock *MockGetByIDService
}

// NewMockGetByIDService creates a new mock instance.
func NewMockGetByIDService(ctrl *gomock.Controller) *MockGetByIDService {
	mock := &MockGetByIDService{ctrl: ctrl}
	mock.recorder = &MockGetByIDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetByIDService) EXPECT() *MockGetByIDServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockGetByIDService) GetByID(ctx context.Context, id string) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGetByIDServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGetByIDService)(nil).GetByID), ctx, id)
}
