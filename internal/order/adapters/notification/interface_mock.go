// Code generated by MockGen. DO NOT EDIT.
// Source: internal/order/adapters/notification/interface.go

// Package notification is a generated GoMock package.
package notification

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendOrderConfirmation mocks base method.
func (m *MockSender) SendOrderConfirmation(ctx context.Context, toEmail, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrderConfirmation", ctx, toEmail, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrderConfirmation indicates an expected call of SendOrderConfirmation.
func (mr *MockSenderMockRecorder) SendOrderConfirmation(ctx, toEmail, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderConfirmation", reflect.TypeOf((*MockSender)(nil).SendOrderConfirmation), ctx, toEmail, orderID)
}
