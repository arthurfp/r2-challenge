// Code generated by MockGen. DO NOT EDIT.
// Source: internal/order/services/query/list_by_user.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	db "r2-challenge/internal/order/adapters/db"
	domain "r2-challenge/internal/order/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListByUserService is a mock of ListByUserService interface.
type MockListByUserService struct {
	ctrl     *gomock.Controller
	recorder *MockListByUserServiceMockRecorder
}

// MockListByUserServiceMockRecorder is the mock recorder for MockListByUserService.
type MockListByUserServiceMockRecorder struct {
	mock *MockListByUserService
}

// NewMockListByUserService creates a new mock instance.
func NewMockListByUserService(ctrl *gomock.Controller) *MockListByUserService {
	mock := &MockListByUserService{ctrl: ctrl}
	mock.recorder = &MockListByUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListByUserService) EXPECT() *MockListByUserServiceMockRecorder {
	return m.recorder
}

// ListByUser mocks base method.
func (m *MockListByUserService) ListByUser(ctx context.Context, userID string, filter db.OrderFilter) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID, filter)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockListByUserServiceMockRecorder) ListByUser(ctx, userID, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockListByUserService)(nil).ListByUser), ctx, userID, filter)
}
