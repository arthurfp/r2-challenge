// Code generated by MockGen. DO NOT EDIT.
// Source: internal/order/services/command/update_status.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	domain "r2-challenge/internal/order/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateStatusService is a mock of UpdateStatusService interface.
type MockUpdateStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateStatusServiceMockRecorder
}

// MockUpdateStatusServiceMockRecorder is the mock recorder for MockUpdateStatusService.
type MockUpdateStatusServiceMockRecorder struct {
	mock *MockUpdateStatusService
}

// NewMockUpdateStatusService creates a new mock instance.
func NewMockUpdateStatusService(ctrl *gomock.Controller) *MockUpdateStatusService {
	mock := &MockUpdateStatusService{ctrl: ctrl}
	mock.recorder = &MockUpdateStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateStatusService) EXPECT() *MockUpdateStatusServiceMockRecorder {
	return m.recorder
}

// UpdateStatus mocks base method.
func (m *MockUpdateStatusService) UpdateStatus(ctx context.Context, orderID, status string) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderID, status)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockUpdateStatusServiceMockRecorder) UpdateStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockUpdateStatusService)(nil).UpdateStatus), ctx, orderID, status)
}
