// Code generated by MockGen. DO NOT EDIT.
// Source: internal/order/services/command/place_order.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	domain "r2-challenge/internal/order/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceOrderService is a mock of PlaceOrderService interface.
type MockPlaceOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceOrderServiceMockRecorder
}

// MockPlaceOrderServiceMockRecorder is the mock recorder for MockPlaceOrderService.
type MockPlaceOrderServiceMockRecorder struct {
	mock *MockPlaceOrderService
}

// NewMockPlaceOrderService creates a new mock instance.
func NewMockPlaceOrderService(ctrl *gomock.Controller) *MockPlaceOrderService {
	mock := &MockPlaceOrderService{ctrl: ctrl}
	mock.recorder = &MockPlaceOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceOrderService) EXPECT() *MockPlaceOrderServiceMockRecorder {
	return m.recorder
}

// Place mocks base method.
func (m *MockPlaceOrderService) Place(ctx context.Context, order domain.Order) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Place", ctx, order)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Place indicates an expected call of Place.
func (mr *MockPlaceOrderServiceMockRecorder) Place(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Place", reflect.TypeOf((*MockPlaceOrderService)(nil).Place), ctx, order)
}
